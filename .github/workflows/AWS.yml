name: Deploy Backend to EC2

on:
  push:
    branches:
      - AWS

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/airline-order-manage:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/airline-order-manage:${{ github.sha }}
            
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            APP_DIR="${HOME}/airline-cicd"
            DOCKER_USER="${{ secrets.DOCKER_HUB_USERNAME }}"
            DOCKER_TOKEN="${{ secrets.DOCKER_HUB_TOKEN }}"

            # 进入部署目录（确保存在）
            cd "$APP_DIR"

            # Compose v2/v1 兼容
            if sudo docker compose version >/dev/null 2>&1; then
              DC="sudo docker compose"
            elif sudo docker-compose --version >/dev/null 2>&1; then
              DC="sudo docker-compose"
            else
              echo "❌ Docker Compose 未安装"; exit 1
            fi

            # （可选）删除已废弃的 version 字段影响：不需要动作，保留提示即可

            # 如仓库是私有，先登录 Docker Hub（公有可跳过：仍然安全且无副作用）
            if [ -n "$DOCKER_USER" ] && [ -n "$DOCKER_TOKEN" ]; then
              echo "$DOCKER_TOKEN" | sudo docker login --username "$DOCKER_USER" --password-stdin
            fi

            # 写 .env（保持你原来的变量）
            {
              echo "SPRING_PROFILES_ACTIVE=prod"
              echo "MYSQL_ROOT_PASSWORD=${{ secrets.EC2_MYSQL_ROOT_PASSWORD }}"
              echo "MYSQL_DATABASE=airline_order_db"
              echo "MYSQL_USER=${{ secrets.EC2_MYSQL_USER }}"
              echo "MYSQL_PASSWORD=${{ secrets.EC2_MYSQL_PASSWORD }}"
            } > .env

            # 拉镜像并启动（up 会自动拉取最新标签）
            $DC pull || true   # 私有/网络波动时先容错，再由 up 兜底
            $DC up -d --remove-orphans
            $DC ps

